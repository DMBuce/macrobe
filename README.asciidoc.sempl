
== Install

On Arch Linux, grab the PKGBUILD from the GitHub repository
and install using `makepkg` in the usual way.

On other distributions,
drop the scripts in your `$PATH`,
make them executable,
and make sure http://xmacro.sourceforge.net/[xmacro],
perl and bash 4.3+ are installed.

There is also a Makefile available for package maintainers and advanced users.

== Configure

Running any macrobe command, e.g. `macrobe --help`,
will create a default config for you
if one does not exist at `~/.config/macrobe/config.ini` .
The default config has many comments to explain what each option does.

The `[genmacro]` section of the config
has a mapping of characters to keysym sequences.
To use `genmacro` to generate an xmacro script from text,
these need to be adjusted to match your keyboard layout.
You can use `xev` and press a key to see its keysym.

Users of https://i3wm.org/[i3]
may want to uncomment the `record_pre` and `loop_pre` options
in the default config
and add the following modes to i3's config:

 # record/loop modes
 set $rmacromode (Esc) Stop Recording
 set $lmacromode (Esc) Stop Macro
 mode "$rmacromode" {
     # cancel
     bindsym Escape mode "default"
 }
 mode "$lmacromode" {
     # cancel
     bindsym Escape exec macrobe kill; mode "default"
 }

In addition to displaying handy indicators
when running `macrobe record` and `macrobe loop`,
this setup lets you break out of `macrobe loop` using the Escape key,
which will run `macrobe kill`.

Users who don't have the above setup
will need to find another way to launch `macrobe kill`
when `macrobe loop` is running.

For users who want a simple GUI,
here is an example config for https://github.com/Blezzing/blezz[blezz]
or https://github.com/dmbuce/i3b#rofi-blezz[rofi-blezz]:

 Macro:
 act(r,Record, macrobe record)
 act(e,Edit, urxvt -e macrobe edit)
 act(p,Play, macrobe play)
 act(l,Loop, macrobe loop)
 act(c,Custom, macrobe play my-custom-macro)

image::https://i.imgur.com/f7cxz0v.png[Blezz Menu]

Macros are stored in `~/.config/macrobe/macros/`.

== Usage

-----
$ macrobe
{!./bin/macrobe --help 2>&1}
-----

Record a macro to `~/.config/macrobe/macros/tmp.*`:

 macrobe record

List all macros:

 macrobe list

Edit the most recent `tmp.*` macro with your `$EDITOR` (`vi` by default):

 macrobe edit

Play the most recent `tmp.*` macro:

 macrobe play

Play the most recent `tmp.*` macro on repeat:

 macrobe loop

Kill all macrobe and xmacroplay processes:

 macrobe kill

Record/edit/play/loop a specific macro stored in `~/.config/macrobe/macros`:

 macrobe record my-custom-macro
 macrobe edit my-custom-macro
 macrobe play my-custom-macro # or macrobe my-custom-macro
 macrobe loop my-custom-macro

Convert text from a file or stdin to a macro:

 genmacro file.txt > ~/.config/macrobe/macros/my-custom-macro
 somecommand | genmacro > ~/.config/macrobe/macros/my-custom-macro

=== Dynamic Macros

A dynamic macro is an executable file in `~/.config/macrobe/macros`
with a dot (`.`) in its name.

To create a dynamic macro named `foo`, you can run the following.
Note that the exact extension doesn't matter,
and you could use `foo.py`, `foo.pl`, or `foo.bin` instead, for example.
If multiple `foo.*` files exist,
macrobe uses the most recently modified one.

 macrobe edit foo.sh
 # save and quit, then
 chmod +x ~/.config/macrobe/macros/foo.sh

Once created, you can edit the macro again without the extension

 macrobe edit foo

To play the macro you would run

 macrobe play foo

Since it's a dynamic macro,
macrobe will run the `foo.sh` script,
process its output with `genmacro`,
and run the result with `xmacroplay`.

== Example

Suppose we want to create a dynamic macro
that generates and out-of-office email.
We want the macro to fill out the "To", "CC", "Subject", and "Body"
sections of our email client.
We can accomplish this by including tab characters in the macro,
so that `macrobe play` will tab through those fields.

We also want it to prompt us for a start and end date with a tool like
link:https://github.com/dmbuce/i3b#pickdate[pickdate].
Since these dates will change each time we generate the email,
our macro will need to be a dynamic one.
The script for such a macro might look something like this:

[source,bash]
----
{./ooo.sh}
----

// vim: ft=asciidoc:
