#!/bin/bash

# global vars
configdir="${XDG_CONFIG_HOME-$HOME/.config/macro}"
ini="$configdir/config.ini"

# exit with an error message
die() {
	local message="$1"
	printf "$message\n" "$@"
	exit "${retval-1}"
}

# load ini file
load_ini() {
	local ini="$1"
	local line key value sec section section_keys

	# define default section
	sec=general
	declare -n section="$sec"			  # requires bash 4.3+
	declare -n section_keys="${sec}_keys" # requires bash 4.3+
	declare -ga ${sec}_keys
	declare -gA $sec
	(( ${#section[@]} == 0 )) && section=()
	(( ${#section_keys[@]} == 0 )) && section_keys=()

	shopt -s extglob
	while read -r line; do
		# strip trailing comments
		line="${line%%+([[:space:]])[#;]*}"
		# strip full-line comments
		line="${line##*([[:space:]])[#;]*}"
		# skip comments and empty lines
		[[ -z $line ]] && continue

		# process section headers
		if [[ $line =~ ^\[(.*)\]$ ]]; then
			# replace invalid key characters with underscores
			sec="${BASH_REMATCH[1]//[^a-zA-Z0-9_]/_}"
			[[ $sec = [0-9]* ]] && sec="_$sec"

			# define arrays for section
			declare -n section="$sec"			  # requires bash 4.3+
			declare -n section_keys="${sec}_keys" # requires bash 4.3+
			declare -ga ${sec}_keys
			declare -gA $sec

		# process key-value pairs
		else
			# normalize lines without a '=' separator
			if [[ $line != *=* ]]; then
				# turn 'nokey' into 'key=0'
				if [[ $line == [Nn][Oo]* ]]; then
					line="${line#[Nn][Oo]}=0"
				# turn 'key' into 'key=1'
				else
					line="$line=1"
				fi
			fi

			# split line
			IFS='=' read -r key value <<< "$line"

			# remove leading and trailing whitespace
			key="${key##+([[:space:]])}"
			key="${key%%+([[:space:]])}"
			value="${value##+([[:space:]])}"
			value="${value%%+([[:space:]])}"

			# interpret ~/ as $HOME/
			[[ $value == '~/'* ]] && value="${value/~\//$HOME/}"

			# store key and value
			section_keys+=("$key")
			section["$key"]="$value"
		fi
	done < "$ini"
	shopt -u extglob
}

# print the default configuration
default_ini() {
	cat <<-EOF

		[macro]
		# if stdin is not a tty, macro truncates and logs to this file
		#logfile = ~/.cache/macro/macro.log
		# leave unset to disable logging
		logfile =

		# if \$EDITOR is not set, 'macro edit' will use this command to edit macros
		default_editor = vi

		# set all recorded delays to 50ms
		record_delay = 50
		# add a 100ms delay at the beginning of recorded macros
		#record_start_delay = 100

		# you can define commands to run before or after macro subcommands
		#
		# switch i3 modes at the beginning of 'record' and 'loop' subcommands
		#record_pre = i3-msg 'mode "(Esc) Stop Recording"'
		#loop_pre = i3-msg 'mode "(Esc) Stop Macro"'

		# you can also define commands to run before or after every macro subcommand
		#
		# clean up old tmp macros every time you run 'macro'
		post = find ~/.config/macro/macros -maxdepth 1 -type f -name 'tmp.*' -mtime +365 -delete

		[genmacro]
		# add a 100ms delay at the beginning of generated macros
		#start_delay = 100

		# map characters to keysims
		#
		# special ini characters need to be escaped:    =\[;#
		# escape sequences for whitespace characters:   \n \t \s
		\`  = grave
		-  = minus
		\= = equal
		\\\\ = backslash
		]  = bracketright
		\[ = bracketleft
		'  = apostrophe
		\; = semicolon
		/  = slash
		.  = period
		,  = comma
		\s = space
		\t = Tab
		\n = Return
		_  = Shift_L minus
		+  = Shift_L equal
		|  = Shift_L backslash
		}  = Shift_L bracketright
		{  = Shift_L bracketleft
		"  = Shift_L apostrophe
		:  = Shift_L semicolon
		?  = Shift_L slash
		>  = Shift_L period
		<  = Shift_L comma
		~  = Shift_R grave
		!  = Shift_R 1
		@  = Shift_R 2
		\# = Shift_R 3
		$  = Shift_R 4
		%  = Shift_R 5
		^  = Shift_L 6
		&  = Shift_L 7
		*  = Shift_L 8
		(  = Shift_L 9
		)  = Shift_L 0

		Q  = Shift_L q
		W  = Shift_L w
		E  = Shift_L e
		R  = Shift_L r
		T  = Shift_L t
		A  = Shift_L a
		S  = Shift_L s
		D  = Shift_L d
		F  = Shift_L f
		G  = Shift_L g
		Z  = Shift_L z
		X  = Shift_L x
		C  = Shift_L c
		V  = Shift_L v

		Y  = Shift_R y
		U  = Shift_R u
		I  = Shift_R i
		O  = Shift_R o
		P  = Shift_R p
		H  = Shift_R h
		J  = Shift_R j
		K  = Shift_R k
		L  = Shift_R l
		B  = Shift_R b
		N  = Shift_R n
		M  = Shift_R m

	EOF
}

# print most recently recorded file to stdout
mostrecent() {
	find "$configdir/macros" -maxdepth 1 -type f -name 'tmp.*' -printf "%T@ %p\n" \
		| sort -rn \
		| head -n1 \
		| cut -d' ' -f 2-
}

# play an xmacro script
play() {
	local file="$configdir/macros/$1"
	if [[ -z "$1" ]]; then
		file="$(mostrecent)"
	fi
	xmacroplay "${DISPLAY-:0}" < "$file"
}

# edit an xmacro script
edit() {
	local file="$configdir/macros/$1"
	if [[ -z "$1" ]]; then
		file="$(mostrecent)"
	fi
	${EDITOR-${macro[default_editor]-vi}} "$file"
}

# record an xmacro script
rec() {
	local file="$configdir/macros/$1"
	if [[ -z "$1" ]]; then
		file="$(mktemp "$configdir/macros/tmp.XXXXXX")" || exit 1
	fi
	xmacrorec2 -k 9 > "$file"

	# adjust delays in output
	if [[ "${macro[record_delay]}" =~ ^[0-9]+$ ]]; then
		sed -i "/^Delay / s/.*/Delay ${macro[record_delay]}/" "$file"
	fi
	if [[ "${macro[record_start_delay]}" =~ ^[0-9]+$ ]]; then
		sed -i "1s/^/Delay ${macro[record_start_delay]}\n/" "$file"
	fi
}

# display help message
usage="Syntax: ${0##*/} list|kill
        ${0##*/} record|edit|play|loop [template]
        ${0##*/} <template>

Manage xmacro macros.
"
if [[ "$*" == *--help* ]]; then
	die "$usage"
fi

# parse args
cmd="$1"
shift

# copy default config if necessary
if [[ ! -f "$ini" ]]; then
	set -o noclobber
	default_ini > "$ini" || exit
	set +o noclobber
fi

# load config
if [[ -r "$ini" ]]; then
	load_ini "$ini"
fi

# redirect all output to log file when not run from terminal
if [[ -n "${macro[logfile]}" && ! -t 0 ]]; then
	mkdir -p "$(dirname "${macro[logfile]}")" || exit
	exec &> "${macro[logfile]}"
fi

# create config dir if necessary and switch to it
mkdir -p "$configdir/macros"
cd "$configdir"

# run pre hooks
[[ -n "${macro[pre]}" ]] && eval "${macro[pre]}"
[[ -n "${macro[${cmd}_pre]}" ]] && eval "${macro[${cmd}_pre]}"

# do the thing
case "$cmd" in
	list)
		( cd macros && grep -ls . *; )
	;;
	record) 
		rec "$@"
	;;
	edit)
		edit "$@"
	;;
	play) 
		play "$@"
	;;
	loop)
		while play "$@"; do
			true
		done
	;;
	kill)
		killall macro xmacroplay
	;;
	"")
		die "$usage"
	;;
	*)
		play "$cmd"
	;;
esac

# run post hooks
[[ -n "${macro[${cmd}_post]}" ]] && eval "${macro[${cmd}_post]}"
[[ -n "${macro[post]}" ]] && eval "${macro[post]}"

